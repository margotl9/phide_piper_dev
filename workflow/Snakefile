# -------------------------------------
# Snakefile: set up and module organization
# -------------------------------------
import pandas as pd


# Load sample information and validate
configfile: "config/config.yaml"


samples_df = pd.read_csv("config/samples.tsv", sep="\t")
assembly_sample = (samples_df["assembly"] + "_" + samples_df["sample"])

# load results path
results = config["results"]


# load report
report: "report/workflow.rst"


# -------------------------------------
# Modularization: rules to include
# -------------------------------------
# include: "rules/01_read_preprocessing.smk"
# include: "rules/02_virus_enrichment.smk"
# include: "rules/03_read_assembly.smk"
# include: "rules/04_virus_identification.smk"
# include: "rules/05_virus_clustering.smk"
# include: "rules/06_virus_quality.smk"
# include: "rules/07_virus_host.smk"
include: "rules/read_abundances.smk"


# include: "rules/08_virus_taxonomy.smk"
# include: "rules/09_virus_lifestyle.smk"
# include: "rules/10_virus_function.smk"
# include: "rules/11_virus_clustering.smk"


# -------------------------------------
# Pipeline outputs
# -------------------------------------
def get_final_output(wildcards):
        
    final_output = []

    # final_output.append(results + "01_READ_PREPROCESSING/read_preprocessing_figure.png")

    # final_output.append(results + "02_VIRUS_ENRICHMENT/virus_enrichment_figure.png")

    # final_output.append(results + "03_READ_ASSEMBLY/read_assembly_figure.png")

    # final_output.append(
    #     results + "04_VIRUS_IDENTIFICATION/virus_identification_figure.png"
    # )

    # final_output.append(results + "05_VIRUS_CLUSTERING/virus_clustering_figure.png")

    # final_output.append(results + "06_VIRUS_QUALITY/virus_quality_figure.png")

    # # final_output.append(
    # #     results + "07_VIRUS_ABUNDANCE/test",
    # # )

    # final_output.append(results + "07_VIRUS_HOST/01_crispr_spacers/host_taxonomy.csv")

    # final_output.append(results + "07_VIRUS_HOST/02_phist/phist_host_taxonomy.csv")

    # final_output.append(results + "07_VIRUS_HOST/03_rafah/Seq_Info_Prediction.tsv")
   
   #---------------------------------------------
   #desired output files from read_abundances.smk
   #---------------------------------------------
    # final_output.append(results+"READ_ABUNDANCE/test")
    # bams=expand(results + "READ_ABUNDANCE/01_bowtie2/bam_files/{assembly_sample}.bam", 
    # assembly_sample = assembly_sample)
    # for b in bams:
    #     final_output.append(b)
    
    krakens=expand(results+"READ_ABUNDANCE/02_kraken2_bracken/kraken/{assembly_sample}_kraken2.kraken",
    assembly_sample = assembly_sample)
    for k in krakens:
        final_output.append(k)

    reports=expand(results+"READ_ABUNDANCE/02_kraken2_bracken/reports/{assembly_sample}_kraken2.kreport",
    assembly_sample = assembly_sample)
    for r in reports:
        final_output.append(r)

    brackens=expand(results + "READ_ABUNDANCE/02_kraken2_bracken/bracken/{assembly_sample}_bracken_abundances.bracken",
    assembly_sample=assembly_sample)
    for b in brackens:
        final_output.append(b)

    # final_output.append(results+"READ_ABUNDANCE/test")

    # final_output.append(results+"READ_ABUNDANCE/04_instrain_profile/profile.IS")


    return final_output


rule all:
    input:
        get_final_output,
        results+"READ_ABUNDANCE/05_instrain_compare/compare.IS/output/compare.IS_comparisonsTable.tsv",


